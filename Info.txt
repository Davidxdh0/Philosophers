forks = aantal Philosophers -> mininmaal 2 anders niet eten

na eten -> slaap -> think of eten
starve = death -> weergave 10 ms

number_of_philosophers		int
time_to_die 				ms
time_to_eat 				ms
time_to_sleep				ms
? number_of_times_each_philosopher_must_eat

of wanneer er 1 doodgaat -> max 10 ms na dood

memset, printf, malloc, free, write,
usleep, 
gettimeofday, 
pthread_create,
pthread_detach, 
pthread_join, 
pthread_mutex_init,
pthread_mutex_destroy, 
pthread_mutex_lock,
pthread_mutex_unlock
jnoh@stussdent.42sessouls.skr> 
heel groot en klein
time to die klopt

Todo:
structs cleanen
ft_atoi?
Mutex locken en testen
sleep
eat
think
death checker
free memory

laten testen en inleveren

Do not test with more than 200 philosophers.
Do not test with time_to_die or time_to_eat or time_to_sleep set to values lower than 60 ms.
Test 1 800 200 200. The philosopher should not eat and should die.
Test 5 800 200 200. No philosopher should die.
Test 5 800 200 200 7. No philosopher should die and the simulation should stop when every philosopher has eaten at least 7 times.
Test 4 410 200 200. No philosopher should die.
Test 4 310 200 100. One philosopher should die.
Test with 2 philosophers and check the different times: a death delayed by more than 10 ms is unacceptable.
Test with any values of your choice to verify all the requirements. Ensure philosophers die at the right time, that they don't steal forks, and so forth.







